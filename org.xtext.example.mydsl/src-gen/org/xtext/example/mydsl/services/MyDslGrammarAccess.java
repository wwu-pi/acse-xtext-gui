/*
 * generated by Xtext
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class MyDslGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Model");
		private final Assignment cWindowsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cWindowsWindowParserRuleCall_0 = (RuleCall)cWindowsAssignment.eContents().get(0);
		
		//Model:
		//	windows+=Window+;
		@Override public ParserRule getRule() { return rule; }

		//windows+=Window+
		public Assignment getWindowsAssignment() { return cWindowsAssignment; }

		//Window
		public RuleCall getWindowsWindowParserRuleCall_0() { return cWindowsWindowParserRuleCall_0; }
	}

	public class WindowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Window");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWindowKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdIDTerminalRuleCall_1_0 = (RuleCall)cIdAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cTitleKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cTitleAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cTitleSTRINGTerminalRuleCall_3_1_0 = (RuleCall)cTitleAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cParametersKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cParametersAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cParametersINTTerminalRuleCall_4_1_0 = (RuleCall)cParametersAssignment_4_1.eContents().get(0);
		private final Assignment cMainAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final Keyword cMainMainKeyword_5_0 = (Keyword)cMainAssignment_5.eContents().get(0);
		private final Assignment cElementsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cElementsElementParserRuleCall_6_0 = (RuleCall)cElementsAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Window:
		//	'Window' id=ID '{' ('Title' title=STRING)? ('Parameters' parameters=INT)? main='main'? elements+=Element* '}';
		@Override public ParserRule getRule() { return rule; }

		//'Window' id=ID '{' ('Title' title=STRING)? ('Parameters' parameters=INT)? main='main'? elements+=Element* '}'
		public Group getGroup() { return cGroup; }

		//'Window'
		public Keyword getWindowKeyword_0() { return cWindowKeyword_0; }

		//id=ID
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_1_0() { return cIdIDTerminalRuleCall_1_0; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//('Title' title=STRING)?
		public Group getGroup_3() { return cGroup_3; }

		//'Title'
		public Keyword getTitleKeyword_3_0() { return cTitleKeyword_3_0; }

		//title=STRING
		public Assignment getTitleAssignment_3_1() { return cTitleAssignment_3_1; }

		//STRING
		public RuleCall getTitleSTRINGTerminalRuleCall_3_1_0() { return cTitleSTRINGTerminalRuleCall_3_1_0; }

		//('Parameters' parameters=INT)?
		public Group getGroup_4() { return cGroup_4; }

		//'Parameters'
		public Keyword getParametersKeyword_4_0() { return cParametersKeyword_4_0; }

		//parameters=INT
		public Assignment getParametersAssignment_4_1() { return cParametersAssignment_4_1; }

		//INT
		public RuleCall getParametersINTTerminalRuleCall_4_1_0() { return cParametersINTTerminalRuleCall_4_1_0; }

		//main='main'?
		public Assignment getMainAssignment_5() { return cMainAssignment_5; }

		//'main'
		public Keyword getMainMainKeyword_5_0() { return cMainMainKeyword_5_0; }

		//elements+=Element*
		public Assignment getElementsAssignment_6() { return cElementsAssignment_6; }

		//Element
		public RuleCall getElementsElementParserRuleCall_6_0() { return cElementsElementParserRuleCall_6_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class ElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Element");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLabeledTextParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLabelParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cButtonParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Element:
		//	LabeledText | Label | Button;
		@Override public ParserRule getRule() { return rule; }

		//LabeledText | Label | Button
		public Alternatives getAlternatives() { return cAlternatives; }

		//LabeledText
		public RuleCall getLabeledTextParserRuleCall_0() { return cLabeledTextParserRuleCall_0; }

		//Label
		public RuleCall getLabelParserRuleCall_1() { return cLabelParserRuleCall_1; }

		//Button
		public RuleCall getButtonParserRuleCall_2() { return cButtonParserRuleCall_2; }
	}

	public class LabeledTextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.LabeledText");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLabeledTextKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdIDTerminalRuleCall_1_0 = (RuleCall)cIdAssignment_1.eContents().get(0);
		private final Assignment cTextAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTextSTRINGTerminalRuleCall_2_0 = (RuleCall)cTextAssignment_2.eContents().get(0);
		private final Assignment cValidatorAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValidatorValidatorParserRuleCall_3_0 = (RuleCall)cValidatorAssignment_3.eContents().get(0);
		
		//LabeledText:
		//	'LabeledText' id=ID text=STRING? validator=Validator?;
		@Override public ParserRule getRule() { return rule; }

		//'LabeledText' id=ID text=STRING? validator=Validator?
		public Group getGroup() { return cGroup; }

		//'LabeledText'
		public Keyword getLabeledTextKeyword_0() { return cLabeledTextKeyword_0; }

		//id=ID
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_1_0() { return cIdIDTerminalRuleCall_1_0; }

		//text=STRING?
		public Assignment getTextAssignment_2() { return cTextAssignment_2; }

		//STRING
		public RuleCall getTextSTRINGTerminalRuleCall_2_0() { return cTextSTRINGTerminalRuleCall_2_0; }

		//validator=Validator?
		public Assignment getValidatorAssignment_3() { return cValidatorAssignment_3; }

		//Validator
		public RuleCall getValidatorValidatorParserRuleCall_3_0() { return cValidatorValidatorParserRuleCall_3_0; }
	}

	public class ValidatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Validator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cValidatorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cRestrictionAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final Keyword cRestrictionNumericKeyword_1_0_0 = (Keyword)cRestrictionAssignment_1_0.eContents().get(0);
		private final Assignment cRestrictionAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final Keyword cRestrictionLettersKeyword_1_1_0 = (Keyword)cRestrictionAssignment_1_1.eContents().get(0);
		private final Assignment cRestrictionAssignment_1_2 = (Assignment)cAlternatives_1.eContents().get(2);
		private final Keyword cRestrictionDateKeyword_1_2_0 = (Keyword)cRestrictionAssignment_1_2.eContents().get(0);
		
		//Validator:
		//	'Validator' (restriction='numeric' | restriction='letters' | restriction='date');
		@Override public ParserRule getRule() { return rule; }

		//'Validator' (restriction='numeric' | restriction='letters' | restriction='date')
		public Group getGroup() { return cGroup; }

		//'Validator'
		public Keyword getValidatorKeyword_0() { return cValidatorKeyword_0; }

		//(restriction='numeric' | restriction='letters' | restriction='date')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//restriction='numeric'
		public Assignment getRestrictionAssignment_1_0() { return cRestrictionAssignment_1_0; }

		//'numeric'
		public Keyword getRestrictionNumericKeyword_1_0_0() { return cRestrictionNumericKeyword_1_0_0; }

		//restriction='letters'
		public Assignment getRestrictionAssignment_1_1() { return cRestrictionAssignment_1_1; }

		//'letters'
		public Keyword getRestrictionLettersKeyword_1_1_0() { return cRestrictionLettersKeyword_1_1_0; }

		//restriction='date'
		public Assignment getRestrictionAssignment_1_2() { return cRestrictionAssignment_1_2; }

		//'date'
		public Keyword getRestrictionDateKeyword_1_2_0() { return cRestrictionDateKeyword_1_2_0; }
	}

	public class LabelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Label");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLabelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTextAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTextSTRINGTerminalRuleCall_1_0 = (RuleCall)cTextAssignment_1.eContents().get(0);
		
		//Label:
		//	'Label' text=STRING;
		@Override public ParserRule getRule() { return rule; }

		//'Label' text=STRING
		public Group getGroup() { return cGroup; }

		//'Label'
		public Keyword getLabelKeyword_0() { return cLabelKeyword_0; }

		//text=STRING
		public Assignment getTextAssignment_1() { return cTextAssignment_1; }

		//STRING
		public RuleCall getTextSTRINGTerminalRuleCall_1_0() { return cTextSTRINGTerminalRuleCall_1_0; }
	}

	public class ButtonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Button");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cButtonKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdIDTerminalRuleCall_1_0 = (RuleCall)cIdAssignment_1.eContents().get(0);
		private final Assignment cTextAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTextSTRINGTerminalRuleCall_2_0 = (RuleCall)cTextAssignment_2.eContents().get(0);
		
		//Button:
		//	'Button' id=ID text=STRING?;
		@Override public ParserRule getRule() { return rule; }

		//'Button' id=ID text=STRING?
		public Group getGroup() { return cGroup; }

		//'Button'
		public Keyword getButtonKeyword_0() { return cButtonKeyword_0; }

		//id=ID
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_1_0() { return cIdIDTerminalRuleCall_1_0; }

		//text=STRING?
		public Assignment getTextAssignment_2() { return cTextAssignment_2; }

		//STRING
		public RuleCall getTextSTRINGTerminalRuleCall_2_0() { return cTextSTRINGTerminalRuleCall_2_0; }
	}
	
	
	private final ModelElements pModel;
	private final WindowElements pWindow;
	private final ElementElements pElement;
	private final LabeledTextElements pLabeledText;
	private final ValidatorElements pValidator;
	private final LabelElements pLabel;
	private final ButtonElements pButton;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pWindow = new WindowElements();
		this.pElement = new ElementElements();
		this.pLabeledText = new LabeledTextElements();
		this.pValidator = new ValidatorElements();
		this.pLabel = new LabelElements();
		this.pButton = new ButtonElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	windows+=Window+;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//Window:
	//	'Window' id=ID '{' ('Title' title=STRING)? ('Parameters' parameters=INT)? main='main'? elements+=Element* '}';
	public WindowElements getWindowAccess() {
		return pWindow;
	}
	
	public ParserRule getWindowRule() {
		return getWindowAccess().getRule();
	}

	//Element:
	//	LabeledText | Label | Button;
	public ElementElements getElementAccess() {
		return pElement;
	}
	
	public ParserRule getElementRule() {
		return getElementAccess().getRule();
	}

	//LabeledText:
	//	'LabeledText' id=ID text=STRING? validator=Validator?;
	public LabeledTextElements getLabeledTextAccess() {
		return pLabeledText;
	}
	
	public ParserRule getLabeledTextRule() {
		return getLabeledTextAccess().getRule();
	}

	//Validator:
	//	'Validator' (restriction='numeric' | restriction='letters' | restriction='date');
	public ValidatorElements getValidatorAccess() {
		return pValidator;
	}
	
	public ParserRule getValidatorRule() {
		return getValidatorAccess().getRule();
	}

	//Label:
	//	'Label' text=STRING;
	public LabelElements getLabelAccess() {
		return pLabel;
	}
	
	public ParserRule getLabelRule() {
		return getLabelAccess().getRule();
	}

	//Button:
	//	'Button' id=ID text=STRING?;
	public ButtonElements getButtonAccess() {
		return pButton;
	}
	
	public ParserRule getButtonRule() {
		return getButtonAccess().getRule();
	}

	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
