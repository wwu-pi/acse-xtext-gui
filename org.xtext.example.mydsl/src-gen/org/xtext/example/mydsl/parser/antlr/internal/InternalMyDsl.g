/*
 * generated by Xtext
 */
grammar InternalMyDsl;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.xtext.example.mydsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

}

@parser::members {

 	private MyDslGrammarAccess grammarAccess;
 	
    public InternalMyDslParser(TokenStream input, MyDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected MyDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getWindowsWindowParserRuleCall_0()); 
	    }
		lv_windows_0_0=ruleWindow		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"windows",
        		lv_windows_0_0, 
        		"org.xtext.example.mydsl.MyDsl.Window");
	        afterParserOrEnumRuleCall();
	    }

)
)+
;





// Entry rule entryRuleWindow
entryRuleWindow returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getWindowRule()); }
	 iv_ruleWindow=ruleWindow 
	 { $current=$iv_ruleWindow.current; } 
	 EOF 
;

// Rule Window
ruleWindow returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Window' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getWindowAccess().getWindowKeyword_0());
    }
(
(
		lv_id_1_0=RULE_ID
		{
			newLeafNode(lv_id_1_0, grammarAccess.getWindowAccess().getIdIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getWindowRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"id",
        		lv_id_1_0, 
        		"org.eclipse.xtext.common.Terminals.ID");
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getWindowAccess().getLeftCurlyBracketKeyword_2());
    }
(	otherlv_3='Title' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getWindowAccess().getTitleKeyword_3_0());
    }
(
(
		lv_title_4_0=RULE_STRING
		{
			newLeafNode(lv_title_4_0, grammarAccess.getWindowAccess().getTitleSTRINGTerminalRuleCall_3_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getWindowRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"title",
        		lv_title_4_0, 
        		"org.eclipse.xtext.common.Terminals.STRING");
	    }

)
))?(	otherlv_5='Parameters' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getWindowAccess().getParametersKeyword_4_0());
    }
(
(
		lv_parameters_6_0=RULE_INT
		{
			newLeafNode(lv_parameters_6_0, grammarAccess.getWindowAccess().getParametersINTTerminalRuleCall_4_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getWindowRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"parameters",
        		lv_parameters_6_0, 
        		"org.eclipse.xtext.common.Terminals.INT");
	    }

)
))?(
(
		lv_main_7_0=	'main' 
    {
        newLeafNode(lv_main_7_0, grammarAccess.getWindowAccess().getMainMainKeyword_5_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getWindowRule());
	        }
       		setWithLastConsumed($current, "main", lv_main_7_0, "main");
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getWindowAccess().getElementsElementParserRuleCall_6_0()); 
	    }
		lv_elements_8_0=ruleElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWindowRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_8_0, 
        		"org.xtext.example.mydsl.MyDsl.Element");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_9='}' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getWindowAccess().getRightCurlyBracketKeyword_7());
    }
)
;





// Entry rule entryRuleElement
entryRuleElement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getElementRule()); }
	 iv_ruleElement=ruleElement 
	 { $current=$iv_ruleElement.current; } 
	 EOF 
;

// Rule Element
ruleElement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getElementAccess().getLabeledTextParserRuleCall_0()); 
    }
    this_LabeledText_0=ruleLabeledText
    { 
        $current = $this_LabeledText_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getElementAccess().getLabelParserRuleCall_1()); 
    }
    this_Label_1=ruleLabel
    { 
        $current = $this_Label_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getElementAccess().getButtonParserRuleCall_2()); 
    }
    this_Button_2=ruleButton
    { 
        $current = $this_Button_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleLabeledText
entryRuleLabeledText returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLabeledTextRule()); }
	 iv_ruleLabeledText=ruleLabeledText 
	 { $current=$iv_ruleLabeledText.current; } 
	 EOF 
;

// Rule LabeledText
ruleLabeledText returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='LabeledText' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getLabeledTextAccess().getLabeledTextKeyword_0());
    }
(
(
		lv_id_1_0=RULE_ID
		{
			newLeafNode(lv_id_1_0, grammarAccess.getLabeledTextAccess().getIdIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLabeledTextRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"id",
        		lv_id_1_0, 
        		"org.eclipse.xtext.common.Terminals.ID");
	    }

)
)(
(
		lv_text_2_0=RULE_STRING
		{
			newLeafNode(lv_text_2_0, grammarAccess.getLabeledTextAccess().getTextSTRINGTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLabeledTextRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"text",
        		lv_text_2_0, 
        		"org.eclipse.xtext.common.Terminals.STRING");
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getLabeledTextAccess().getValidatorValidatorParserRuleCall_3_0()); 
	    }
		lv_validator_3_0=ruleValidator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLabeledTextRule());
	        }
       		set(
       			$current, 
       			"validator",
        		lv_validator_3_0, 
        		"org.xtext.example.mydsl.MyDsl.Validator");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleValidator
entryRuleValidator returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getValidatorRule()); }
	 iv_ruleValidator=ruleValidator 
	 { $current=$iv_ruleValidator.current; } 
	 EOF 
;

// Rule Validator
ruleValidator returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Validator' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getValidatorAccess().getValidatorKeyword_0());
    }
((
(
		lv_restriction_1_0=	'numeric' 
    {
        newLeafNode(lv_restriction_1_0, grammarAccess.getValidatorAccess().getRestrictionNumericKeyword_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getValidatorRule());
	        }
       		setWithLastConsumed($current, "restriction", lv_restriction_1_0, "numeric");
	    }

)
)
    |(
(
		lv_restriction_2_0=	'letters' 
    {
        newLeafNode(lv_restriction_2_0, grammarAccess.getValidatorAccess().getRestrictionLettersKeyword_1_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getValidatorRule());
	        }
       		setWithLastConsumed($current, "restriction", lv_restriction_2_0, "letters");
	    }

)
)
    |(
(
		lv_restriction_3_0=	'date' 
    {
        newLeafNode(lv_restriction_3_0, grammarAccess.getValidatorAccess().getRestrictionDateKeyword_1_2_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getValidatorRule());
	        }
       		setWithLastConsumed($current, "restriction", lv_restriction_3_0, "date");
	    }

)
)))
;





// Entry rule entryRuleLabel
entryRuleLabel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLabelRule()); }
	 iv_ruleLabel=ruleLabel 
	 { $current=$iv_ruleLabel.current; } 
	 EOF 
;

// Rule Label
ruleLabel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Label' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getLabelAccess().getLabelKeyword_0());
    }
(
(
		lv_text_1_0=RULE_STRING
		{
			newLeafNode(lv_text_1_0, grammarAccess.getLabelAccess().getTextSTRINGTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLabelRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"text",
        		lv_text_1_0, 
        		"org.eclipse.xtext.common.Terminals.STRING");
	    }

)
))
;





// Entry rule entryRuleButton
entryRuleButton returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getButtonRule()); }
	 iv_ruleButton=ruleButton 
	 { $current=$iv_ruleButton.current; } 
	 EOF 
;

// Rule Button
ruleButton returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Button' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getButtonAccess().getButtonKeyword_0());
    }
(
(
		lv_id_1_0=RULE_ID
		{
			newLeafNode(lv_id_1_0, grammarAccess.getButtonAccess().getIdIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getButtonRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"id",
        		lv_id_1_0, 
        		"org.eclipse.xtext.common.Terminals.ID");
	    }

)
)(
(
		lv_text_2_0=RULE_STRING
		{
			newLeafNode(lv_text_2_0, grammarAccess.getButtonAccess().getTextSTRINGTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getButtonRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"text",
        		lv_text_2_0, 
        		"org.eclipse.xtext.common.Terminals.STRING");
	    }

)
)?)
;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


