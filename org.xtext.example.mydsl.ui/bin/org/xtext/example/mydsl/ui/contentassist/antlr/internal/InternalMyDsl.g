/*
 * generated by Xtext
 */
grammar InternalMyDsl;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package org.xtext.example.mydsl.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

}

@parser::members {
 
 	private MyDslGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(MyDslGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleModel
entryRuleModel 
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel
    @init {
		int stackSize = keepStackSize();
    }
	:
(
(
{ before(grammarAccess.getModelAccess().getWindowsAssignment()); }
(rule__Model__WindowsAssignment)
{ after(grammarAccess.getModelAccess().getWindowsAssignment()); }
)
(
{ before(grammarAccess.getModelAccess().getWindowsAssignment()); }
(rule__Model__WindowsAssignment)*
{ after(grammarAccess.getModelAccess().getWindowsAssignment()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleWindow
entryRuleWindow 
:
{ before(grammarAccess.getWindowRule()); }
	 ruleWindow
{ after(grammarAccess.getWindowRule()); } 
	 EOF 
;

// Rule Window
ruleWindow
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getWindowAccess().getGroup()); }
(rule__Window__Group__0)
{ after(grammarAccess.getWindowAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleElement
entryRuleElement 
:
{ before(grammarAccess.getElementRule()); }
	 ruleElement
{ after(grammarAccess.getElementRule()); } 
	 EOF 
;

// Rule Element
ruleElement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getElementAccess().getAlternatives()); }
(rule__Element__Alternatives)
{ after(grammarAccess.getElementAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLabeledText
entryRuleLabeledText 
:
{ before(grammarAccess.getLabeledTextRule()); }
	 ruleLabeledText
{ after(grammarAccess.getLabeledTextRule()); } 
	 EOF 
;

// Rule LabeledText
ruleLabeledText
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLabeledTextAccess().getGroup()); }
(rule__LabeledText__Group__0)
{ after(grammarAccess.getLabeledTextAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleValidator
entryRuleValidator 
:
{ before(grammarAccess.getValidatorRule()); }
	 ruleValidator
{ after(grammarAccess.getValidatorRule()); } 
	 EOF 
;

// Rule Validator
ruleValidator
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getValidatorAccess().getGroup()); }
(rule__Validator__Group__0)
{ after(grammarAccess.getValidatorAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLabel
entryRuleLabel 
:
{ before(grammarAccess.getLabelRule()); }
	 ruleLabel
{ after(grammarAccess.getLabelRule()); } 
	 EOF 
;

// Rule Label
ruleLabel
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLabelAccess().getGroup()); }
(rule__Label__Group__0)
{ after(grammarAccess.getLabelAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleButton
entryRuleButton 
:
{ before(grammarAccess.getButtonRule()); }
	 ruleButton
{ after(grammarAccess.getButtonRule()); } 
	 EOF 
;

// Rule Button
ruleButton
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getButtonAccess().getGroup()); }
(rule__Button__Group__0)
{ after(grammarAccess.getButtonAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__Element__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElementAccess().getLabeledTextParserRuleCall_0()); }
	ruleLabeledText
{ after(grammarAccess.getElementAccess().getLabeledTextParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getElementAccess().getLabelParserRuleCall_1()); }
	ruleLabel
{ after(grammarAccess.getElementAccess().getLabelParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getElementAccess().getButtonParserRuleCall_2()); }
	ruleButton
{ after(grammarAccess.getElementAccess().getButtonParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Validator__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValidatorAccess().getRestrictionAssignment_1_0()); }
(rule__Validator__RestrictionAssignment_1_0)
{ after(grammarAccess.getValidatorAccess().getRestrictionAssignment_1_0()); }
)

    |(
{ before(grammarAccess.getValidatorAccess().getRestrictionAssignment_1_1()); }
(rule__Validator__RestrictionAssignment_1_1)
{ after(grammarAccess.getValidatorAccess().getRestrictionAssignment_1_1()); }
)

    |(
{ before(grammarAccess.getValidatorAccess().getRestrictionAssignment_1_2()); }
(rule__Validator__RestrictionAssignment_1_2)
{ after(grammarAccess.getValidatorAccess().getRestrictionAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Window__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Window__Group__0__Impl
	rule__Window__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Window__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWindowAccess().getWindowKeyword_0()); }

	'Window' 

{ after(grammarAccess.getWindowAccess().getWindowKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Window__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Window__Group__1__Impl
	rule__Window__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Window__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWindowAccess().getIdAssignment_1()); }
(rule__Window__IdAssignment_1)
{ after(grammarAccess.getWindowAccess().getIdAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Window__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Window__Group__2__Impl
	rule__Window__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Window__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWindowAccess().getLeftCurlyBracketKeyword_2()); }

	'{' 

{ after(grammarAccess.getWindowAccess().getLeftCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Window__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Window__Group__3__Impl
	rule__Window__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Window__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWindowAccess().getGroup_3()); }
(rule__Window__Group_3__0)?
{ after(grammarAccess.getWindowAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Window__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Window__Group__4__Impl
	rule__Window__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Window__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWindowAccess().getGroup_4()); }
(rule__Window__Group_4__0)?
{ after(grammarAccess.getWindowAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Window__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Window__Group__5__Impl
	rule__Window__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Window__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWindowAccess().getMainAssignment_5()); }
(rule__Window__MainAssignment_5)?
{ after(grammarAccess.getWindowAccess().getMainAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Window__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Window__Group__6__Impl
	rule__Window__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Window__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWindowAccess().getElementsAssignment_6()); }
(rule__Window__ElementsAssignment_6)*
{ after(grammarAccess.getWindowAccess().getElementsAssignment_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Window__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Window__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Window__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWindowAccess().getRightCurlyBracketKeyword_7()); }

	'}' 

{ after(grammarAccess.getWindowAccess().getRightCurlyBracketKeyword_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


















rule__Window__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Window__Group_3__0__Impl
	rule__Window__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Window__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWindowAccess().getTitleKeyword_3_0()); }

	'Title' 

{ after(grammarAccess.getWindowAccess().getTitleKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Window__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Window__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Window__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWindowAccess().getTitleAssignment_3_1()); }
(rule__Window__TitleAssignment_3_1)
{ after(grammarAccess.getWindowAccess().getTitleAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Window__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Window__Group_4__0__Impl
	rule__Window__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Window__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWindowAccess().getParametersKeyword_4_0()); }

	'Parameters' 

{ after(grammarAccess.getWindowAccess().getParametersKeyword_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Window__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Window__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Window__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWindowAccess().getParametersAssignment_4_1()); }
(rule__Window__ParametersAssignment_4_1)
{ after(grammarAccess.getWindowAccess().getParametersAssignment_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__LabeledText__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LabeledText__Group__0__Impl
	rule__LabeledText__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LabeledText__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLabeledTextAccess().getLabeledTextKeyword_0()); }

	'LabeledText' 

{ after(grammarAccess.getLabeledTextAccess().getLabeledTextKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LabeledText__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LabeledText__Group__1__Impl
	rule__LabeledText__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LabeledText__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLabeledTextAccess().getIdAssignment_1()); }
(rule__LabeledText__IdAssignment_1)
{ after(grammarAccess.getLabeledTextAccess().getIdAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LabeledText__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LabeledText__Group__2__Impl
	rule__LabeledText__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__LabeledText__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLabeledTextAccess().getTextAssignment_2()); }
(rule__LabeledText__TextAssignment_2)?
{ after(grammarAccess.getLabeledTextAccess().getTextAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LabeledText__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LabeledText__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LabeledText__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLabeledTextAccess().getValidatorAssignment_3()); }
(rule__LabeledText__ValidatorAssignment_3)?
{ after(grammarAccess.getLabeledTextAccess().getValidatorAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Validator__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Validator__Group__0__Impl
	rule__Validator__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Validator__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValidatorAccess().getValidatorKeyword_0()); }

	'Validator' 

{ after(grammarAccess.getValidatorAccess().getValidatorKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Validator__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Validator__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Validator__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValidatorAccess().getAlternatives_1()); }
(rule__Validator__Alternatives_1)
{ after(grammarAccess.getValidatorAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Label__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Label__Group__0__Impl
	rule__Label__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Label__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLabelAccess().getLabelKeyword_0()); }

	'Label' 

{ after(grammarAccess.getLabelAccess().getLabelKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Label__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Label__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Label__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLabelAccess().getTextAssignment_1()); }
(rule__Label__TextAssignment_1)
{ after(grammarAccess.getLabelAccess().getTextAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Button__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Button__Group__0__Impl
	rule__Button__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Button__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getButtonAccess().getButtonKeyword_0()); }

	'Button' 

{ after(grammarAccess.getButtonAccess().getButtonKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Button__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Button__Group__1__Impl
	rule__Button__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Button__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getButtonAccess().getIdAssignment_1()); }
(rule__Button__IdAssignment_1)
{ after(grammarAccess.getButtonAccess().getIdAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Button__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Button__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Button__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getButtonAccess().getTextAssignment_2()); }
(rule__Button__TextAssignment_2)?
{ after(grammarAccess.getButtonAccess().getTextAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}









rule__Model__WindowsAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getWindowsWindowParserRuleCall_0()); }
	ruleWindow{ after(grammarAccess.getModelAccess().getWindowsWindowParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Window__IdAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWindowAccess().getIdIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getWindowAccess().getIdIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Window__TitleAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWindowAccess().getTitleSTRINGTerminalRuleCall_3_1_0()); }
	RULE_STRING{ after(grammarAccess.getWindowAccess().getTitleSTRINGTerminalRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Window__ParametersAssignment_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWindowAccess().getParametersINTTerminalRuleCall_4_1_0()); }
	RULE_INT{ after(grammarAccess.getWindowAccess().getParametersINTTerminalRuleCall_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Window__MainAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWindowAccess().getMainMainKeyword_5_0()); }
(
{ before(grammarAccess.getWindowAccess().getMainMainKeyword_5_0()); }

	'main' 

{ after(grammarAccess.getWindowAccess().getMainMainKeyword_5_0()); }
)

{ after(grammarAccess.getWindowAccess().getMainMainKeyword_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Window__ElementsAssignment_6
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWindowAccess().getElementsElementParserRuleCall_6_0()); }
	ruleElement{ after(grammarAccess.getWindowAccess().getElementsElementParserRuleCall_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LabeledText__IdAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLabeledTextAccess().getIdIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getLabeledTextAccess().getIdIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LabeledText__TextAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLabeledTextAccess().getTextSTRINGTerminalRuleCall_2_0()); }
	RULE_STRING{ after(grammarAccess.getLabeledTextAccess().getTextSTRINGTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LabeledText__ValidatorAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLabeledTextAccess().getValidatorValidatorParserRuleCall_3_0()); }
	ruleValidator{ after(grammarAccess.getLabeledTextAccess().getValidatorValidatorParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Validator__RestrictionAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValidatorAccess().getRestrictionNumericKeyword_1_0_0()); }
(
{ before(grammarAccess.getValidatorAccess().getRestrictionNumericKeyword_1_0_0()); }

	'numeric' 

{ after(grammarAccess.getValidatorAccess().getRestrictionNumericKeyword_1_0_0()); }
)

{ after(grammarAccess.getValidatorAccess().getRestrictionNumericKeyword_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Validator__RestrictionAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValidatorAccess().getRestrictionLettersKeyword_1_1_0()); }
(
{ before(grammarAccess.getValidatorAccess().getRestrictionLettersKeyword_1_1_0()); }

	'letters' 

{ after(grammarAccess.getValidatorAccess().getRestrictionLettersKeyword_1_1_0()); }
)

{ after(grammarAccess.getValidatorAccess().getRestrictionLettersKeyword_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Validator__RestrictionAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValidatorAccess().getRestrictionDateKeyword_1_2_0()); }
(
{ before(grammarAccess.getValidatorAccess().getRestrictionDateKeyword_1_2_0()); }

	'date' 

{ after(grammarAccess.getValidatorAccess().getRestrictionDateKeyword_1_2_0()); }
)

{ after(grammarAccess.getValidatorAccess().getRestrictionDateKeyword_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Label__TextAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLabelAccess().getTextSTRINGTerminalRuleCall_1_0()); }
	RULE_STRING{ after(grammarAccess.getLabelAccess().getTextSTRINGTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Button__IdAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getButtonAccess().getIdIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getButtonAccess().getIdIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Button__TextAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getButtonAccess().getTextSTRINGTerminalRuleCall_2_0()); }
	RULE_STRING{ after(grammarAccess.getButtonAccess().getTextSTRINGTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


